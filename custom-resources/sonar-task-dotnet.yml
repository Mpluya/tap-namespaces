apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: sonarqube-scanner-dotnet
  labels:
    apps.tanzu.vmware.com/pipeline: test-dotnet
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/categories: Security
    tekton.dev/tags: security
    tekton.dev/displayName: "sonarqube scanner"
    tekton.dev/platforms: "linux/amd64"
spec:
  params:
    - name: sonar-host-url
      description: Host URL where the sonarqube server is running
      default: ""
    - name: sonar-project-key
      description: Project's unique key
      default: ""
    - name: source-url
      description: Location of the source code
    - name: source-revision
      description: i.e. git hash
      default: ""
    - name: wait-on-sonar-analysis
      description: toggle to wait until sonarqube analysis is complete
    - name: source-sub-path
      default: ""
    - name: sonar-token-secret
      type: string
      description: name of the secret holding the sonar-token
      default: sonar-token
  workspaces:
    - name: supplychain-workspace

  steps:
    - name: pull-code
      image: gradle
      workingDir: $(workspaces.supplychain-workspace.path)
      script: |
        #!/usr/bin/env bash
        set -ex
        wget -qO- $(params.source-url) | tar xvz

    - name: sonar-scan
      image: mcr.microsoft.com/dotnet/sdk:6.0
      workingDir: $(workspaces.supplychain-workspace.path)
      env:
      - name: SONAR_TOKEN
        valueFrom:
          secretKeyRef:
            name: $(params.sonar-token-secret)
            key: bot-token
      script: |
        apt-get update
        apt-get install --yes openjdk-11-jre
        dotnet tool install --global dotnet-sonarscanner
        dotnet tool install --global coverlet.console
        export PATH="$PATH:/root/.dotnet/tools"

        SUB_PATH=$(params.source-sub-path)
        if [ -z ${SUB_PATH:-""} ]; then
          echo "INFO: No subpath provided."
        else
          echo "INFO: Changing directory to $SUB_PATH"
          cd $SUB_PATH
        fi
        
        dotnet sonarscanner begin /k:$(params.sonar-project-key) /d:sonar.host.url=$(params.sonar-host-url) /d:sonar.login=${SONAR_TOKEN} /d:sonar.qualitygate.wait=$(params.wait-on-sonar-analysis) /d:sonar.cs.opencover.reportsPaths=coverage.xml
        dotnet build *.sln
        dotnet test *.sln /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:MergeWith='coverage.xml'
        dotnet sonarscanner end /d:sonar.login=${SONAR_TOKEN}